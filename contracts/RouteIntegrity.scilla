scilla_version 0

(* RouteIntegrity contract *)

import ListUtils

(***************************************************)
(*               Associated library                *)
(***************************************************)
library RouteIntegrity

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
  Cons {Message} msg nil_msg
  
let not_owner_code = Int32 1
let set_hash_code = Int32 2
let get_hash_code = Int32 3

(***************************************************)
(*             The contract definition             *)
(***************************************************)

(*This is somewhat incomplete; plug in the return*)
(*values depending on your metadata splitter*)
contract RouteIntegrity
(owner: ByStr20)

field mapp_block : Map ByStr32 BNum = Emp ByStr32 BNum

transition setHash (msg : ByStr32)
  is_owner = builtin eq owner _sender;
  match is_owner with
  | False =>
    e = {_eventname : "setHash()"; code : not_owner_code};
    event e
  | True =>
    current <- & BLOCKNUMBER;
    mapp_block[msg] := current;
    e = {_eventname : "setHash()"; code : set_hash_code};
    event e
  end
end


transition getHash (msg : ByStr32)
    current <- mapp_block[msg];
    e = {_eventname: "getHash()"; code : get_hash_code};
    event e
end


transition contrAddr()
  msg1 = {_eventname : "ContractAddress"; addr : _this_address };
  event msg1
end
